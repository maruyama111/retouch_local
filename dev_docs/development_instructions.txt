# 開発指示書

## プロジェクト概要
本プロジェクトは、既存のStreamlitアプリケーションをElectronを用いてデスクトップアプリケーション化することを目的としています。Pythonをバックエンドとして使用し、Electronでフロントエンドを構築します。

## デスクトップアプリ化の目的および仕様
- 目的:
  - Webアプリからローカルアプリに変更することで、高速な画像処理を可能にし、ユーザー体感を向上。
  - ネットワーク依存を排除し、安定した処理環境を提供。
  - 大量の写真を一括処理できるバッチ処理機能を備える。
  - 初心者でも直感的に扱えるUIをElectronで実装。
- 仕様要点:
  - 1枚あたりの処理時間を1秒以内に抑える。
  - バッチ処理時は100枚以上を目標。
  - Electron + Python（OpenCV, scikit-learn, mediapipe 等）で構成。

## 開発環境
- **フロントエンド**: Electron
- **バックエンド**: Python
- **UI**: HTML, CSS, JavaScript, UIフレームワーク(React/Vue/Vanilla JS など)

## 実装方針
- フロントエンド(Electron)とバックエンド(Python)で明確に分ける。
- Python側 → 既存のStreamlitアプリにある学習ロジック・レタッチ処理ロジックを再利用する。必要に応じて機能を切り出し、ライブラリまたはモジュールとして構成。
- Electron側 → UIフレームワーク(React/Vue/Vanilla JS など)を選択し、モデル・画像のアップロード、バッチ処理実行、結果表示を行う。

## 機能概要
- 追加学習: 既存モデルを拡張し、レタッチ前後の写真ペアを利用して自動学習。
- バッチ処理: 選択したモデルで複数写真を一括レタッチし、ZIPでダウンロード可能に。
- モデル選択: 複数モデルの同時管理が可能なようにディレクトリや命名規則を整理。
- バッチ処理制限: ユーザー入力による最大処理枚数を設定し、操作性を維持。

## ディレクトリ構成の参考例

project-root/
├─ electron_app/
│ ├─ main.js (Electronのメインプロセス)
│ ├─ renderer/ (UI実装)
│ ├─ package.json
├─ python_backend/
│ ├─ requirements.txt (Pythonライブラリの定義)
│ ├─ retouch_core.py (レタッチ処理・学習処理のコア)
│ └─ model_manager.py (モデル選択・保存の管理)
├─ docs/
│ ├─ 企画書.ipynb
│ ├─ 要件定義.ipynb
│ └─ 詳細設計書.ipynb
└── README.md

## 開発ステップ
1. **環境設定**
   - ElectronとPythonの開発環境をセットアップします。

2. **Electronアプリの構築**
   - `electron_app/`ディレクトリ内でElectronプロジェクトを作成し、基本的なウィンドウを設定します。

3. **UIの移植**
   - Streamlitで実装されているUIをElectronに移植し、必要に応じてHTML/CSS/JavaScript、UIフレームワーク(React/Vue/Vanilla JS など)で調整します。

4. **機能の統合**
   - PythonスクリプトをElectronアプリから呼び出し、データを取得・表示します。

5. **テストとデバッグ**
   - 各機能が正しく動作するか確認し、バグ修正と最適化を行います。

6. **ドキュメント作成**
   - 開発プロセスや使用方法をドキュメント化します。

## 注意事項
- Pythonファイルの修正は最小限に抑え、主にElectronとのインターフェース部分のみを変更します。
- ドキュメントは`docs/`ディレクトリに保存し、常に最新の状態を保つようにします。

以上の方針に従い、段階的に開発を進めてください。何か不明点や追加要件があれば随時検討し、要件定義書や詳細設計書を更新してください。
